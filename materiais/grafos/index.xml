<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Grafos on UnBalloon</title><link>https://unballoon.github.io/materiais/grafos/</link><description>Recent content in Grafos on UnBalloon</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><atom:link href="https://unballoon.github.io/materiais/grafos/index.xml" rel="self" type="application/rss+xml"/><item><title>Representação de Grafos</title><link>https://unballoon.github.io/materiais/grafos/representacao/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/grafos/representacao/</guid><description>Um dos assuntos mais frequentes são problemas relacionados a grafos, ou que podem ser representados como grafos, apesar de não ser óbvio à primeira vista.
Conceitos Há diversos tipos e atributos de um grafo:
O que é um grafo? Um grafo é definido simplesmente por um conjunto de vértices, e outro conjunto de arestas. Essas arestas ligam dois vértices, e podem ter pesos atrelados à elas.
Grafo simples Grafo simples é um grafo que não cujas arestas não tem peso, não possui loops, e nem arestas múltiplas.</description></item><item><title>Busca em Largura</title><link>https://unballoon.github.io/materiais/grafos/busca_largura/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/grafos/busca_largura/</guid><description>Podemos chamá-la também de BFS (Breadth-First Search).
Uma das formas de percorrer um grafo é fazer um percorrimento em largura. Começamos a explorar os vértices do grafo a partir de um certo vértice a. E a ordem que vamos navegando entre os vértices é de forma que os mais próximos a a sempre serão visitados antes. Então, primeiro a será visitado, depois os vértices que são adjacentes a a(distância 1), depois os vértices que estão a duas arestas de distância, e assim por diante.</description></item><item><title>Busca em Profundidade</title><link>https://unballoon.github.io/materiais/grafos/busca_profundidade/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/grafos/busca_profundidade/</guid><description>Outra forma de percorrer um grafo é fazer percorrimento em profundidade, também de chamado de DFS(Depth-first search). O algoritmo se chama assim porque funciona de uma forma que sempre vamos &amp;lsquo;mergulhar&amp;rsquo; no grafo o mais fundo que pudermos. Quando não for mais possível ir mais fundo no grafo, voltamos até que seja ir mais fundo novamente, sem repetir vértices já visitados.
A implementação da DFS mais comum é recursiva, por ser mais intuitiva.</description></item><item><title>Dijkstra</title><link>https://unballoon.github.io/materiais/grafos/dijkstra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/grafos/dijkstra/</guid><description>Complexidade O(E*log(V))
E = Edges V = Vertex
O algoritmo de Dijkstra é um algoritmo muito conhecido para percorrimento de grafos cujas arestas tem pesos, ele nos permite percorrer os vértices na ordem de distância para um vértice fonte. E efetivamente descobrir essas distâncias.
Mais especificamente, de uma forma tal que considerando o vértice fonte como s, se o menor caminho de s para um vértice u é estritamente menor que o menor caminho de s para um outro vértice v, com certeza visitaremos u antes de v.</description></item></channel></rss>