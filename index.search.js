var relearn_search_index=[{content:`Entrada O objeto “cin” representa o stream de entrada no C++. Ele realiza a leitura de um sequência de dados, sem espaços e sem tabulações, vindas do teclado. Para coletar estes dados armazenados, usa-se o “operador de extração” que “extrai” dados do stream.
Lendo um Input A primeira linha terá N que é a quantidade de números a serem lidos.
A segunda linha será os N números.
input: 4 1 5 2 3 #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ int n; cin\u003e\u003en; for(int i=0; i\u003cn; i++){ int numero; cin\u003e\u003enumero; } return 0; } Saída O objeto “cout” representa o stream de saída no C++. Este stream é uma espécie de sequência (fluxo) de dados a serem impressos na tela. Para realizar a impressão, usa-se o “operador de inserção” que “insere” dados dentro do stream.
Printando o famoso “Hello World”
#include \u003cbits/stdc++.h\u003e using namespace std; int main(){ cout\u003c\u003c"Hello World"\u003c\u003cendl; return 0; } Informação O “endl” é usado para fazer quebra de linha, porém, pode ser mais lento que o “\\n”.
Casas Decimais Para printar as casas decimais, precisamos usar o “fixed” que é uma função do C++ usada para formatar a saída, juntamente com o “setprecision”, que diz quantas casas será printada.
#include \u003cbits/stdc++.h\u003e using namespace std; int main(){ double pi = 3.141592653; cout\u003c\u003cfixed; cout\u003c\u003csetprecision(4); cout\u003c\u003cpi\u003c\u003cendl; // 3.1415 return 0; } `,description:"",tags:["iniciante"],title:"Entrada/Saída",uri:"/materiais/fundamentos/input-output/"},{content:"Tudo o que você precisa saber sobre C++ Subpáginas Entrada/Saída Declarações ",description:"",tags:null,title:"Fundamentos do C++",uri:"/materiais/fundamentos/"},{content:"Conteúdos de Programação Competitiva Subpáginas Fundamentos do C++ Algoritmos ",description:"",tags:null,title:"Materiais",uri:"/materiais/"},{content:`No C++ representa uma sequência de caracteres
Podemos declarar uma string como:
string nomevar; string nomevar = constante; string nomevar = char ∗ variavel; string nomevar(char ∗ variavel); string nomevar(tamanho, constante char); Concatenação Podemos usar o operador “+” para concatenar duas strings
#include \u003cbits/stdc++.h\u003e using namespace std; int main(){ string a = "abc"; string b = "def"; string c = a + b; cout\u003c\u003cc\u003c\u003cendl; // abcdef return 0; } Transformando um inteiro em string Podemos transformar um inteiro em uma string usando a função “to_string()”
#include \u003cbits/stdc++.h\u003e using namespace std; int main(){ int x = 123; string s = to_string(x); cout\u003c\u003cs\u003c\u003cendl; return 0; } `,description:"",tags:["iniciante"],title:"Strings",uri:"/materiais/fundamentos/declaracoes/string/"},{content:"",description:"",tags:null,title:"Algoritmos",uri:"/materiais/algoritmos/"},{content:"Subpáginas Strings Pairs Vector ",description:"",tags:["iniciante"],title:"Declarações",uri:"/materiais/fundamentos/declaracoes/"},{content:` Um “pair” é um contêiner que consiste de dois tipos de dados ou objetos.
Declaramos um pair como:
pair\u003ctipodado1, tipodado2\u003e variavel; Podemos inicializá-lo usando o make_pair ou diretamente:
variavel = make_pair(dado1, dado2); variavel = {dado1, dado2}; O primeiro elemento é acessado usando o “first” e o segundo usando “second” variavel.first; variavel.second; Exemplo 1: Um Pair que armazena 2 inteiros #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ pair\u003cint, int\u003e pii; pii = {5, 10}; cout\u003c\u003c pii.first \u003c\u003c " " \u003c\u003c pii.second\u003c\u003c"\\n"; // 5 10 return 0; } Exemplo 2: Um Pair que armazena 1 inteiro e 1 double #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ pair\u003cint, double\u003e pii; pii = {2, 1.5365}; cout\u003c\u003c pii.first \u003c\u003c " " \u003c\u003c pii.second\u003c\u003c"\\n"; // 2 1.5365 return 0; } Comparando Variáveis: #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ pair\u003cint, int\u003e v1, v2; v1 = {3, 1}; v2 = {2, 2}; if(v1 \u003e v2) cout\u003c\u003c "v1 é maior que v2"; else cout\u003c\u003c "v1 é menor ou igual a v2"; return 0; } `,description:"",tags:["iniciante"],title:"Pairs",uri:"/materiais/fundamentos/declaracoes/pair/"},{content:`Vector pode ser entendido como uma estruturas de dados similar a um array de tamanho expansível.
A diferença principal entre vector e array é a alocação: no array adota-se alocação estática, enquanto que no vector a alocaçãao é dinâmica.
Inicializar #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ // inicializando vetores vazios vector\u003cdouble\u003e vd; vector\u003cpair\u003cint,double\u003e\u003e vid; vector\u003cstring\u003e vs; vector\u003cint\u003e v; // vector\u003cint\u003e v(tamanho, valor) vector\u003cint\u003e v(4, 0); // {0, 0, 0, 0} vetor de 4 posições com valor 0 vector\u003cint\u003e v(4); // {0, 0, 0, 0} por default, inicializa como 0 v.push_back(5); // Adiciona o elemento 5 // v = {0, 0, 0, 0, 5} v.pop_back(); // v = {0, 0, 0, 0} } Iterar #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ vector\u003cint\u003e v = {1, 2, 3, 4, 5}; // printa um elemento em cada linha for(int i=0; i\u003cv.size(); i++){ cout\u003c\u003c v[i] \u003c\u003c endl; } } Informação O método size() retorna a quantidade de elementos existentes em um vector. Complexidade: O(1)
Ordenar Complexidade O(log(N))
#include \u003cbits/stdc++.h\u003e using namespace std; int main(){ vector\u003cint\u003e v = {3, 4, 1, 2, 5}; sort(v.begin(), v.end()); // ordena o vetor // v = {1, 2, 3, 4, 5} } Inverter Complexidade O(N)
#include \u003cbits/stdc++.h\u003e using namespace std; int main(){ vector\u003cint\u003e v = {1, 2, 3, 4, 5}; reverse(v.begin(), v.end()); // v = {5, 4, 3, 2, 1} } Vector de Pair #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ vector\u003cpair\u003cint,int\u003e\u003e v = {{1, 2}, {3, 4}, {5, 6}}; // v[0].first = 1 // v[0].second = 2 } `,description:"",tags:["iniciante"],title:"Vector",uri:"/materiais/fundamentos/declaracoes/vector/"},{content:"",description:"",tags:null,title:"Categories",uri:"/categories/"},{content:"",description:"",tags:null,title:"iniciante",uri:"/tags/iniciante/"},{content:"",description:"",tags:null,title:"Tags",uri:"/tags/"},{content:"O Grupo de programação competitiva mais top do Centro-Oeste Subpáginas Materiais ",description:"",tags:null,title:"UnBalloon",uri:"/"}]