<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>iniciante on UnBalloon</title><link>https://unballoon.github.io/tags/iniciante/</link><description>Recent content in iniciante on UnBalloon</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><atom:link href="https://unballoon.github.io/tags/iniciante/index.xml" rel="self" type="application/rss+xml"/><item><title>Entrada/Saída</title><link>https://unballoon.github.io/materiais/fundamentos/input-output/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/fundamentos/input-output/</guid><description>Entrada O objeto &amp;ldquo;cin&amp;rdquo; representa o stream de entrada no C++. Ele realiza a leitura de um sequência de dados, sem espaços e sem tabulações, vindas do teclado. Para coletar estes dados armazenados, usa-se o &amp;ldquo;operador de extração&amp;rdquo; que &amp;ldquo;extrai&amp;rdquo; dados do stream.
Lendo um Input A primeira linha terá N que é a quantidade de números a serem lidos.
A segunda linha será os N números.
input: 4 1 5 2 3 #include &amp;lt;bits/stdc++.</description></item><item><title>Strings</title><link>https://unballoon.github.io/materiais/fundamentos/declaracoes/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/fundamentos/declaracoes/string/</guid><description>No C++ representa uma sequência de caracteres
Podemos declarar uma string como:
string nomevar; string nomevar = constante; string nomevar = char ∗ variavel; string nomevar(char ∗ variavel); string nomevar(tamanho, constante char); Concatenação Podemos usar o operador &amp;ldquo;+&amp;rdquo; para concatenar duas strings
#include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ string a = &amp;#34;abc&amp;#34;; string b = &amp;#34;def&amp;#34;; string c = a + b; cout&amp;lt;&amp;lt;c&amp;lt;&amp;lt;endl; // abcdef return 0; } Transformando um inteiro em string Podemos transformar um inteiro em uma string usando a função &amp;ldquo;to_string()&amp;rdquo;</description></item><item><title>Declarações</title><link>https://unballoon.github.io/materiais/fundamentos/declaracoes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/fundamentos/declaracoes/</guid><description>Subpáginas Strings Pairs Vector</description></item><item><title>Pairs</title><link>https://unballoon.github.io/materiais/fundamentos/declaracoes/pair/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/fundamentos/declaracoes/pair/</guid><description>Um &amp;ldquo;pair&amp;rdquo; é um contêiner que consiste de dois tipos de dados ou objetos.
Declaramos um pair como:
pair&amp;lt;tipodado1, tipodado2&amp;gt; variavel; Podemos inicializá-lo usando o make_pair ou diretamente:
variavel = make_pair(dado1, dado2); variavel = {dado1, dado2}; O primeiro elemento é acessado usando o &amp;ldquo;first&amp;rdquo; e o segundo usando &amp;ldquo;second&amp;rdquo; variavel.first; variavel.second; Exemplo 1: Um Pair que armazena 2 inteiros #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ pair&amp;lt;int, int&amp;gt; pii; pii = {5, 10}; cout&amp;lt;&amp;lt; pii.</description></item><item><title>Vector</title><link>https://unballoon.github.io/materiais/fundamentos/declaracoes/vector/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://unballoon.github.io/materiais/fundamentos/declaracoes/vector/</guid><description>Vector pode ser entendido como uma estruturas de dados similar a um array de tamanho expansível.
A diferença principal entre vector e array é a alocação: no array adota-se alocação estática, enquanto que no vector a alocaçãao é dinâmica.
Inicializar #include &amp;lt;bits/stdc++.h&amp;gt; using namespace std; int main(){ // inicializando vetores vazios vector&amp;lt;double&amp;gt; vd; vector&amp;lt;pair&amp;lt;int,double&amp;gt;&amp;gt; vid; vector&amp;lt;string&amp;gt; vs; vector&amp;lt;int&amp;gt; v; // vector&amp;lt;int&amp;gt; v(tamanho, valor) vector&amp;lt;int&amp;gt; v(4, 0); // {0, 0, 0, 0} vetor de 4 posições com valor 0 vector&amp;lt;int&amp;gt; v(4); // {0, 0, 0, 0} por default, inicializa como 0 v.</description></item></channel></rss>